// npx prisma generate
// npx prisma db push

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
  // previewFeatures = ["referentialActions"] // You won't need this in Prisma 3.X or higher.
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

enum UserRole {
  ADMIN
  USER
  STAFF
  DIRECTOR
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  signinTime    DateTime?
  image         String?
  role          UserRole  @default(USER)
  // sessions           Session[]
  accounts      Account[]
}

model Student {
  id         String    @id @default(cuid())
  email      String    @unique
  fullName   String
  major      String?
  schoolYear Int?
  brithday   DateTime?
  gender     String?
  address    String?
  phone      String?
  createDate DateTime  @default(now())
  userId     String?
}

// Branch Dormitory
model Branch {
  id              String            @id @default(cuid())
  img             String?
  name            String
  address         String
  floorNumber     Int
  description     String?
  service         Services[]
  ServiceOnBranch ServiceOnBranch[]
  createDate      DateTime          @default(now())
  facilities      Facilities[]
  Room            Room[]
}

model Services {
  id              String            @id @default(cuid())
  name            String
  description     String?
  cost            Int
  branch          Branch[]
  ServiceOnBranch ServiceOnBranch[]
  createDate      DateTime          @default(now())
}

model Room {
  id           String       @id @default(cuid())
  code         String       @unique
  description  String?
  branchId     String
  roomTypeCode String
  floor        Int
  branch       Branch       @relation(fields: [branchId], references: [id])
  roomType     RoomType     @relation(fields: [roomTypeCode], references: [code])
  Facilities   Facilities[]
  createDate   DateTime     @default(now())
}

model RoomType {
  id          String   @id @default(cuid())
  name        String
  members     Int
  description String?
  createDate  DateTime @default(now())
  code        String   @unique
  Room        Room[]
}

model FacilitiesType {
  id          String       @id @default(cuid())
  name        String
  description String?
  createDate  DateTime     @default(now())
  code        String       @unique
  facilities  Facilities[]
}

enum StatusFacilities {
  ACTIVE
  INACTIVE
  MAINTENANCE
  LIQUIDATION
}

model Facilities {
  id                 String           @id @default(cuid())
  name               String
  description        String?
  facilitiesTypeCode String
  status             StatusFacilities @default(INACTIVE)
  branchId           String?
  code               String           @unique
  roomId             String?
  branch             Branch?          @relation(fields: [branchId], references: [id])
  facilitiesType     FacilitiesType   @relation(fields: [facilitiesTypeCode], references: [code], onDelete: Cascade)
  createDate         DateTime         @default(now())
  maintenanceId      String?
  maintenance        Maintenance?     @relation(fields: [maintenanceId], references: [id])
  room               Room?            @relation(fields: [roomId], references: [id])
}

// Maintenance
enum StatusMaintenance {
  CREATED
  INPROGRESS
  FINISHED
}

model Maintenance {
  id              String            @id @default(cuid())
  code            String            @unique
  mantainanceName String
  startDate       DateTime
  description     String?
  facilities      Facilities[]
  status          StatusMaintenance @default(INPROGRESS)
  createDate      DateTime          @default(now())
}

// Services + Branch
model ServiceOnBranch {
  service    Services @relation(fields: [serviceId], references: [id])
  serviceId  String // relation scalar field (used in the `@relation` attribute above)
  branch     Branch   @relation(fields: [branchId], references: [id])
  branchId   String // relation scalar field (used in the `@relation` attribute above)
  assignedAt DateTime @default(now())
  assignedBy String
  createDate DateTime @default(now())

  @@id([serviceId, branchId])
}
