// npx prisma generate
// npx prisma db push

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
  // previewFeatures = ["referentialActions"] // You won't need this in Prisma 3.X or higher.
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

enum UserRole {
  ADMIN
  USER
  STAFF
  DIRECTOR
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  verifiedInfo  Boolean   @default(false)
  signinTime    DateTime?
  image         String?
  role          UserRole  @default(USER)
  // sessions           Session[]
  accounts      Account[]
}

model Student {
  id                 String     @id @default(cuid())
  image              String?
  cccdCode           String?    @unique
  cccdOfDate         String?
  cccdPlace          String?
  fullName           String
  gender             String?
  brithday           String?
  nation             String?
  roomId             String?
  religion           String?
  email              String     @unique
  phone              Int?
  studentCode        String?    @unique
  major              String?
  schoolYear         Int?
  bankName           String?
  bankBranch         String?
  bankAccount        String?
  bankNumber         String?
  permanentResidence String?
  familiInfo         String?
  contactinfo        String?
  point              Int?       @default(10)
  studentVerified    Boolean    @default(true)
  Register           Register[]
  Room               Room?      @relation(fields: [roomId], references: [id])
  Violate            Violate[]
  InOut              InOut[]
  Invoice            Invoice[]
  updateDate         DateTime   @updatedAt
  createDate         DateTime   @default(now())
}

// Violate Dormitory
model ViolateType {
  id          String    @id @default(cuid())
  name        String
  code        String    @unique
  point       Int
  allow       Boolean   @default(false) // true: cho phép lập hóa đơn, false: không cho phép
  description String?
  Violate     Violate[]
  updateDate  DateTime  @updatedAt
  createDate  DateTime  @default(now())
}

enum StatusViolate {
  CREATED // Mới tạo
  INPROGRESS // Đang xử lý
  FINISHED // Đã xử lý
}

model Violate {
  id              String        @id @default(cuid())
  name            String
  studentId       String
  typeViolateCode String
  status          StatusViolate @default(CREATED)
  date            String
  description     String
  metaData        String?
  TypeViolate     ViolateType?  @relation(fields: [typeViolateCode], references: [code])
  Student         Student?      @relation(fields: [studentId], references: [id])
  Invoice         Invoice[]
  updateDate      DateTime      @updatedAt
  createDate      DateTime      @default(now())
}

enum StatusInOut {
  IN
  OUT
  NOTIN
  NOTOUT
}

model InOut {
  id         String      @id @default(cuid())
  studentId  String
  status     StatusInOut
  Student    Student     @relation(fields: [studentId], references: [id])
  updateDate DateTime    @updatedAt
  createDate DateTime    @default(now())
}

// Register Dormitory
model Register {
  id               String   @id @default(cuid())
  studentEmail     String
  roomId           String
  registerdeadline Float
  status           Int // 0: Chờ xác nhận, 1: Đã xác nhận, 2: Đã hủy
  Student          Student  @relation(fields: [studentEmail], references: [email])
  Room             Room     @relation(fields: [roomId], references: [id])
  updateDate       DateTime @updatedAt
  createDate       DateTime @default(now())
}

model Invoice {
  id           String   @id @default(cuid())
  roomId       String?
  studentId    String
  violateId    String?
  invoiceMonth String
  invoiceYear  String
  total        Int
  detail       String
  status       Int // 0: Mới tạo, 1: Đã thanh toán, 2: Đã hủy
  Room         Room?    @relation(fields: [roomId], references: [id])
  Student      Student  @relation(fields: [studentId], references: [id])
  Violate      Violate? @relation(fields: [violateId], references: [id])
  updateDate   DateTime @updatedAt
  createDate   DateTime @default(now())
}

// Branch Dormitory
model Branch {
  id          String        @id @default(cuid())
  img         String?
  name        String
  address     String
  floorNumber Int
  description String?
  Facilities  Facilities[]
  Room        Room[]
  updateDate  DateTime      @updatedAt
  createDate  DateTime      @default(now())
  Maintenance Maintenance[]
}

model Services {
  id          String          @id @default(cuid())
  name        String
  description String?
  cost        Int
  allow       Boolean         @default(false) // true: cho phép nhập đơn vị, false: không cho phép
  unit        String
  Rooms       ServiceOnRoom[]
  updateDate  DateTime        @updatedAt
  createDate  DateTime        @default(now())

  @@map("services")
}

model Room {
  id           String          @id @default(cuid())
  code         String
  description  String?
  branchId     String
  roomTypeCode String
  floor        Int
  Branch       Branch          @relation(fields: [branchId], references: [id])
  RoomType     RoomType        @relation(fields: [roomTypeCode], references: [code])
  Facilities   Facilities[]
  Student      Student[]
  Services     ServiceOnRoom[]
  Invoice      Invoice[]
  Register     Register[]
  Maintenance  Maintenance[]
  updateDate   DateTime        @updatedAt
  createDate   DateTime        @default(now())

  @@map("room")
}

model RoomType {
  id          String   @id @default(cuid())
  name        String
  members     Int
  description String?
  code        String   @unique
  cost        Int
  Room        Room[]
  updateDate  DateTime @updatedAt
  createDate  DateTime @default(now())
}

model FacilitiesType {
  id          String       @id @default(cuid())
  name        String
  description String?
  code        String       @unique
  Facilities  Facilities[]
  updateDate  DateTime     @updatedAt
  createDate  DateTime     @default(now())
}

enum StatusFacilities {
  ACTIVE
  INACTIVE
  MAINTENANCE
  LIQUIDATION
}

model Facilities {
  id                 String           @id @default(cuid())
  name               String
  description        String?
  facilitiesTypeCode String
  status             StatusFacilities @default(INACTIVE)
  branchId           String?
  code               String           @unique
  roomId             String?
  maintenanceId      String?
  Branch             Branch?          @relation(fields: [branchId], references: [id])
  FacilitiesType     FacilitiesType   @relation(fields: [facilitiesTypeCode], references: [code], onDelete: Cascade)
  Maintenance        Maintenance?     @relation(fields: [maintenanceId], references: [id])
  Room               Room?            @relation(fields: [roomId], references: [id])
  updateDate         DateTime         @updatedAt
  createDate         DateTime         @default(now())
}

// Maintenance
enum StatusMaintenance {
  CREATED
  INPROGRESS
  FINISHED
}

model Maintenance {
  id              String            @id @default(cuid())
  code            String            @unique
  mantainanceName String
  branchId        String
  reason          String?
  roomId          String?
  Facilities      Facilities[]
  Room            Room?             @relation(fields: [roomId], references: [id])
  Branch          Branch            @relation(fields: [branchId], references: [id])
  status          StatusMaintenance @default(INPROGRESS)
  updateDate      DateTime          @updatedAt
  createDate      DateTime          @default(now())
}

// Services + Room
model ServiceOnRoom {
  serviceId  String // relation scalar field (used in the `@relation` attribute above)
  roomId     String
  Service    Services @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  Room       Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  updateDate DateTime @updatedAt
  createDate DateTime @default(now())

  @@id([serviceId, roomId])
}
