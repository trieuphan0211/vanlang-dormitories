// npx prisma generate
// npx prisma db push

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
  // previewFeatures = ["referentialActions"] // You won't need this in Prisma 3.X or higher.
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  USER
  STAFF
  DIRECTOR
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  sessions              Session[]
  isTwoFactorEnabled    Boolean                @default(false)
  accounts              Account[]
  twoFactorComfirmation TwoFactorComfirmation?
}

enum TypeToken {
  EMAIL
  PASSWORD
}

model VerificationToken {
  identifier String    @id @default(cuid())
  email      String
  token      String    @unique
  expires    DateTime
  type       TypeToken @default(EMAIL)

  @@unique([identifier, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorComfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

// Branch Dormitory
model Branch {
  id              String            @id @default(cuid())
  img             String?
  name            String
  address         String
  floorNumber     Int
  description     String?
  service         Services[]
  ServiceOnBranch ServiceOnBranch[]
  createDate      DateTime          @default(now())
}

model Services {
  id              String            @id @default(cuid())
  name            String
  description     String?
  cost            Int
  branch          Branch[]
  ServiceOnBranch ServiceOnBranch[]
  createDate      DateTime          @default(now())
}

model RoomType {
  id          String   @id @default(cuid())
  name        String
  members     Int
  description String?
  createDate  DateTime @default(now())
}

// Services + Branch
model ServiceOnBranch {
  service    Services @relation(fields: [serviceId], references: [id])
  serviceId  String // relation scalar field (used in the `@relation` attribute above)
  branch     Branch   @relation(fields: [branchId], references: [id])
  branchId   String // relation scalar field (used in the `@relation` attribute above)
  assignedAt DateTime @default(now())
  assignedBy String
  createDate DateTime @default(now())

  @@id([serviceId, branchId])
}
